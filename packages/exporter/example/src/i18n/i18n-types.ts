// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType, LocalizedString, RequiredParams } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType & DisallowNamespaces
export type BaseLocale = 'en'

export type Locales =
	| 'de'
	| 'en'

export type Translation = RootTranslation & DisallowNamespaces

export type Translations = RootTranslation &
{
	'my-namespace': NamespaceMyNamespaceTranslation
}

type RootTranslation = {
	/**
	 * Hi {name}! Please leave a star if you like this project: https://github.com/ivanhofer/typesafe-i18n
	 * @param {string} name
	 */
	HI: RequiredParams<'name'>
	/**
	 * This example demonstrates the exporter functionality
	 */
	exporter: string
}

export type NamespaceMyNamespaceTranslation = {
	i: {
		am: {
			inside: {
				a: {
					/**
					 * I am a nested translation located inside a namespace
					 */
					namespace: string
				}
			}
		}
	}
}

export type Namespaces =
	| 'my-namespace'

type DisallowNamespaces = {
	/**
	 * reserved for 'my-namespace'-namespace\
	 * you need to use the `./my-namespace/index.ts` file instead
	 */
	'my-namespace'?: "[typesafe-i18n] reserved for 'my-namespace'-namespace. You need to use the `./my-namespace/index.ts` file instead."
}

export type TranslationFunctions = {
	/**
	 * Hi {name}! Please leave a star if you like this project: https://github.com/ivanhofer/typesafe-i18n
	 */
	HI: (arg: { name: string }) => LocalizedString
	/**
	 * This example demonstrates the exporter functionality
	 */
	exporter: () => LocalizedString
	'my-namespace': {
		i: {
			am: {
				inside: {
					a: {
						/**
						 * I am a nested translation located inside a namespace
						 */
						namespace: () => LocalizedString
					}
				}
			}
		}
	}
}

export type Formatters = {}
