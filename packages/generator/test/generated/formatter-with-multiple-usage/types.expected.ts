// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType, LocalizedString } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType
export type BaseLocale = 'en'

export type Locales =
	| 'en'

export type Translation = RootTranslation

export type Translations = RootTranslation

type RootTranslation = {
	/**
	 * {0|calculate}!
	 * @param {number} 0
	 */
	A: RequiredParams1<'0|calculate'>
	/**
	 * {0} {1|calculate}
	 * @param {unknown} 0
	 * @param {number} 1
	 */
	B: RequiredParams2<'0', '1|calculate'>
	/**
	 * {0} {2|calculate} {1}
	 * @param {unknown} 0
	 * @param {unknown} 1
	 * @param {number} 2
	 */
	C: RequiredParams3<'0', '1', '2|calculate'>
}

export type TranslationFunctions = {
	/**
	 * {0|calculate}!
	 */
	A: (arg0: number) => LocalizedString
	/**
	 * {0} {1|calculate}
	 */
	B: (arg0: unknown, arg1: number) => LocalizedString
	/**
	 * {0} {2|calculate} {1}
	 */
	C: (arg0: unknown, arg1: unknown, arg2: number) => LocalizedString
}

export type Formatters = {
	calculate: (value: number) => unknown
}

type Param<P extends string> = `{${P}}`

type Params1<P1 extends string> =
	`${string}${Param<P1>}${string}`

type Params2<P1 extends string, P2 extends string> =
	`${string}${Param<P1>}${string}${Param<P2>}${string}`

type Params3<P1 extends string, P2 extends string, P3 extends string> =
	`${string}${Param<P1>}${string}${Param<P2>}${string}${Param<P3>}${string}`

type RequiredParams1<P1 extends string> =
	| Params1<P1>

type RequiredParams2<P1 extends string, P2 extends string> =
	| Params2<P1, P2>
	| Params2<P2, P1>

type RequiredParams3<P1 extends string, P2 extends string, P3 extends string> =
	| Params3<P1, P2, P3>
	| Params3<P1, P3, P2>
	| Params3<P2, P1, P3>
	| Params3<P2, P3, P1>
	| Params3<P3, P1, P2>
	| Params3<P3, P2, P1>
