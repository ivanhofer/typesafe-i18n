// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType, LocalizedString } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType & DisallowNamespaces
export type BaseLocale = 'en'

export type Locales =
	| 'en'

export type Translation = RootTranslation & DisallowNamespaces

export type Translations = RootTranslation &
{
	test: NamespaceTestTranslation,
	a: NamespaceATranslation,
	'and-another': NamespaceAndAnotherTranslation,
	'x y': NamespaceXYTranslation
}

type RootTranslation = {
	/**
	 * s​o​m​e​ ​t​e​x​t
	 */
	wow: string
}

export type NamespaceTestTranslation = {
	/**
	 * h​e​l​l​o
	 */
	hi: string
}

export type NamespaceATranslation = {
	/**
	 * s​o​m​e
	 */
	'0': string
	/**
	 * v​a​l​u​e
	 */
	'1': string
}

export type NamespaceAndAnotherTranslation = {
	b: {
		c: {
			d: {
				/**
				 * h​e​y​y​y
				 */
				e: string
			}
		}
	}
}

export type NamespaceXYTranslation = {
	/**
	 * s​o​m​e​ ​l​o​n​g​ ​t​e​x​t
	 */
	b: string
}

export type Namespaces =
	| 'test'
	| 'a'
	| 'and-another'
	| 'x y'

type DisallowNamespaces = {
	/**
	 * reserved for 'test'-namespace\
	 * you need to use the `./test/index.ts` file instead
	 */
	test?: "[typesafe-i18n] reserved for 'test'-namespace. You need to use the `./test/index.ts` file instead."

	/**
	 * reserved for 'a'-namespace\
	 * you need to use the `./a/index.ts` file instead
	 */
	a?: "[typesafe-i18n] reserved for 'a'-namespace. You need to use the `./a/index.ts` file instead."

	/**
	 * reserved for 'and-another'-namespace\
	 * you need to use the `./and-another/index.ts` file instead
	 */
	'and-another'?: "[typesafe-i18n] reserved for 'and-another'-namespace. You need to use the `./and-another/index.ts` file instead."

	/**
	 * reserved for 'x y'-namespace\
	 * you need to use the `./x y/index.ts` file instead
	 */
	'x y'?: "[typesafe-i18n] reserved for 'x y'-namespace. You need to use the `./x y/index.ts` file instead."
}

export type TranslationFunctions = {
	/**
	 * some text
	 */
	wow: () => LocalizedString
	test: {
		/**
		 * hello
		 */
		hi: () => LocalizedString
	}
	a: {
		/**
		 * some
		 */
		'0': () => LocalizedString
		/**
		 * value
		 */
		'1': () => LocalizedString
	}
	'and-another': {
		b: {
			c: {
				d: {
					/**
					 * heyyy
					 */
					e: () => LocalizedString
				}
			}
		}
	}
	'x y': {
		/**
		 * some long text
		 */
		b: () => LocalizedString
	}
}

export type Formatters = {}
