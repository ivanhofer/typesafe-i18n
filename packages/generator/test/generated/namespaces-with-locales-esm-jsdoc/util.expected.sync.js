// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
// @ts-check
/* eslint-disable */

/**
 * @typedef { import('./types.actual.js').Locales } Locales
 * @typedef { import('./types.actual.js').Translations } Translations
 */

import { initFormatters } from './formatters-template.actual.js'

import { loadedFormatters, loadedLocales, locales } from './util.actual.js'

import en_us from './en-us/index.js'
import it from './it/index.js'

import en_us_test from './en-us/test/index.js'
import en_us_some_other_namespace from './en-us/some-other_namespace/index.js'
import it_test from './it/test/index.js'
import it_some_other_namespace from './it/some-other_namespace/index.js'

const localeTranslations = {
	'en-us': {
		...en_us,
		test: en_us_test,
		'some-other_namespace': en_us_some_other_namespace
	},
	it: {
		...it,
		test: it_test,
		'some-other_namespace': it_some_other_namespace
	},
}

/**
 * @param { Locales } locale
 * @return { void }
 */
export const loadLocale = (locale) => {
	if (loadedLocales[locale]) return

	loadedLocales[locale] = /** @type { Translations } */ (/** @type { unknown } */ (localeTranslations[locale]))
	loadFormatters(locale)
}

/**
 * @return { void }
 */
export const loadAllLocales = () => locales.forEach(loadLocale)

/**
 * @param { Locales } locale
 * @return { void }
 */
export const loadFormatters = (locale) =>
	void (loadedFormatters[locale] = initFormatters(locale))
