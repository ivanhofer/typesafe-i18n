// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters-template.actual'
import type { Locales, Namespaces, Translations } from './types.actual'
import { loadedFormatters, loadedLocales, locales } from './util.actual'

const localeTranslationLoaders = {
	en: () => import('./en'),
}

const localeNamespaceLoaders = {
	en: {
		test: () => import('./en/test'),
		a: () => import('./en/a'),
		'and-another': () => import('./en/and-another'),
		'x y': () => import('./en/x y')
	}
}

const updateDictionary = (locale: Locales, dictionary: Partial<Translations>) =>
	loadedLocales[locale] = { ...loadedLocales[locale], ...dictionary }

export const importTranslations = async <Namespace extends Namespaces>(
locale: Locales,
	namespace?: Namespace) => {
	const loader = namespace
		? localeNamespaceLoaders[locale][namespace]
		: localeTranslationLoaders[locale];
	return (await loader()).default as unknown;
};

export const loadLocaleAsync = async (locale: Locales): Promise<void> => {
	updateDictionary(
		locale,
		(await importTranslations(locale)) as Translations
	)
	loadFormatters(locale)
}

export const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync))

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))

export const loadNamespaceAsync = async <Namespace extends Namespaces>(locale: Locales, namespace: Namespace): Promise<void> =>
	void updateDictionary(
		locale,
		{ [namespace]: (await importTranslations(locale, namespace))} as Partial<Translations>
	)
