import { isTruthy } from 'typesafe-utils'
import type { GeneratorConfigWithDefaultValues, OutputFormats } from '../../config/src/types.mjs'
import { parseTypescriptVersion, TypescriptVersion } from './utils/generator.utils.mjs'

export const OVERRIDE_WARNING =
	"// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten."

type FileEnding = `.${'ts' | 'js' | 'd.ts'}`

let outputFormat: OutputFormats = 'TypeScript'
let tsVersion: TypescriptVersion = parseTypescriptVersion('4.3')

export const configureOutputHandler = (config: GeneratorConfigWithDefaultValues, version: TypescriptVersion): void => {
	outputFormat = config.outputFormat

	shouldGenerateJsDoc = outputFormat === 'JavaScript'
	fileEnding = shouldGenerateJsDoc ? '.js' : '.ts'
	fileEndingForTypesFile = shouldGenerateJsDoc ? '.d.ts' : '.ts'
	tsCheck = shouldGenerateJsDoc
		? `
// @ts-check`
		: ''

	tsVersion = version
	supportsTemplateLiteralTypes =
		shouldGenerateJsDoc || (tsVersion.major === 4 && tsVersion.minor >= 1) || tsVersion.major >= 5
	supportsImportType = shouldGenerateJsDoc || (tsVersion.major === 3 && tsVersion.minor >= 8) || tsVersion.major >= 4
	supportsSatisfiesOperator = (tsVersion.major === 4 && tsVersion.minor >= 9) || tsVersion.major >= 5
	supportsSatisfiesOperatorForJsDoc = tsVersion.major >= 5

	importTypeStatement = `import${supportsImportType ? ' type' : ''}`

	defaultExportStatement =
		shouldGenerateJsDoc && config.adapter !== 'svelte' && !config.esmImports ? 'module.exports =' : 'export default'

	importTypes = (from, ...types) =>
		shouldGenerateJsDoc ? '' : `${importTypeStatement} { ${types.filter(isTruthy).join(', ')} } from '${from}'`
	type = (type) => (shouldGenerateJsDoc ? '' : `: ${type}`)
	typeCast = (type) => (shouldGenerateJsDoc ? '' : ` as ${type}`)
	generics = (...generics) => (shouldGenerateJsDoc ? '' : `<${generics.join(', ')}>`)
	satisfies = (type, codeBlock) =>
		shouldGenerateJsDoc
			? ` = ${codeBlock}`
			: supportsSatisfiesOperator
			? ` = ${codeBlock} satisfies ${type}`
			: `: ${type} = ${codeBlock}`

	jsDocImports = (...imports) =>
		shouldGenerateJsDoc
			? `
/**${imports
					.filter(isTruthy)
					.map(
						({ from, type, alias }) => `
 * @typedef { import('${from}').${type} } ${alias || type}`,
					)
					.join('')}
 */
`
			: ''

	jsDocFunction = (returnType, ...params) =>
		shouldGenerateJsDoc
			? `
/**${params
					.map(
						({ type, name }) => `
 * @param { ${type} } ${name}`,
					)
					.join('')}
 * @return { ${returnType} }
 */`
			: ''

	jsDocType = (type, toWrap = '') =>
		(shouldGenerateJsDoc ? `/** @type { ${type} } */` : '') +
		(toWrap ? (shouldGenerateJsDoc ? ` (${toWrap})` : toWrap) : '')

	jsDocSatisfies = (type) =>
		!shouldGenerateJsDoc ? '' : supportsSatisfiesOperatorForJsDoc ? `/** @satisfies { ${type} } */` : jsDocType(type)

	const importsFileEnding = config.esmImports ? (config.esmImports === 'fileEnding' ? fileEnding : '.js') : ''

	relativeFileImportPath = (fileName: string) =>
		`${fileName.startsWith('..') ? '' : './'}${fileName}${importsFileEnding}`

	relativeFolderImportPath = (folderName: string) =>
		`${folderName.startsWith('..') ? '' : './'}${folderName}${config.esmImports ? `/index${importsFileEnding}` : ''}`
}

// --------------------------------------------------------------------------------------------------------------------

export let supportsTemplateLiteralTypes: boolean
export let supportsImportType: boolean
export let shouldGenerateJsDoc: boolean
export let supportsSatisfiesOperator: boolean
export let supportsSatisfiesOperatorForJsDoc: boolean
export let fileEnding: FileEnding
export let fileEndingForTypesFile: FileEnding
export let tsCheck: string
export let importTypeStatement: string
export let defaultExportStatement: string

// --------------------------------------------------------------------------------------------------------------------

export let importTypes: (from: string, ...types: (string | false)[]) => string

export let type: (type: string) => string

export let typeCast: (type: string) => string

export let generics: (...generic: string[]) => string

export let satisfies: (type: string, codeBlock: string) => string

export let jsDocImports: (...imports: ({ from: string; type: string; alias?: string } | false)[]) => string

export let jsDocFunction: (returnType: string, ...params: { type: string; name: string }[]) => string

export let jsDocType: (type: string, toWrap?: string) => string

export let jsDocSatisfies: (type: string) => string

export let relativeFileImportPath: (fileName: string) => string

export let relativeFolderImportPath: (folderName: string) => string
